.so .tmac.tmac
.
.so .titul.tr
.so .content.tr
.
.
.H2 Введение
.
.PP 2
Цепь Маркова \(em стохастическая модель, описывающая
последовательность возможных событий, при этом каждое
событие зависит только от предыдущего события.
.
.PP 0
Области использования Марковских цепей:
.RS
.PI
Термодинамика,
.
.PI
Статическая механика,
.
.PI
Химия,
.
.PI
Информатика,
.
.PI
Статистика,
.
.PI
Генетика,
.
.PI
Экономика,
.
.PI
Системы распознавания речи,
.
.PI
Марковские текстовые генераторы.
.
.RE
.
.PP 1
Цель работы \(em разработать программу, генерирующую
случайный текст на основе исходного текста, с
использованием цепи Маркова.
.
.PP 0
Для достижения этой цели были поставлены следующие задачи:
.
.RS
.PI
Изучить соответствующую учебную и научную литературу;
.
.PI
Разработать библиотеку для работы с цепями Маркова;
.
.PI
Использовать эту библиотеку для написания программы,
генерирующую случайный текст.
.
.RE
.bp
.
.H2 1.\ Теория
.sp 1
.
.H3 1.1.\ Вступление
.
.PP
Конечная дискретная цепь определяется:
.RS
.PI
\fBМножеством состояний\fP
.EQ
S = roman "{" s sup {1}, s sup {2}, ..., s sup n roman "},"
.EN
событием является переход из одного состояние в другое
в результате случайного испытания.
.
.PI
\fBВектором начальных вероятностей (начальным распределением)\fP
.EQ
p sup 0 = roman "{" p sub 1 sup {0}, ..., p sub n sup 0 roman "},"
.EN
определяющим вероятности того, что в начальный момент времени
процесс находился в состоянии
.EQ
s sub n roman "."
.EN
.
.PI
\fBМатрицей переходных состояний\fP
.EQ
P = roman "{" p sub ij roman "},"
.EN
характеризующей вероятность перехода процесса с текущего
состояния в следующее. При этом сумма переходов из одного
состояния равна 1.
.
.RE
.sp 1
.
.H3 1.2.\ Пример
.
.PP
Рассмотрим Марковские цепи на примере изменения погоды.
Возьмём несколько состояний (дождь, солнце, облачно) и
составим Марковскую цепь для этих состояний.
.
.IM img/mc1.eps Пример\ цепи
.
.PP
Данной цепи соответствует следующая матрица.
.sp 1.5
.mk tmp
.sp 0.5
.ta \n(.luR
	(1)
.sp |\n[tmp]u-0.5v
.ce 1
.EQ
left (
~rpile {0.2 above 0.2 above 0.4}
~~rpile {0.7 above 0.6 above 0.4}
~~rpile {0.1 above 0.2 above 0.2}
~right )
.EN
.bp
.
.H2 2.\ Практика
.sp 1
.H3 2.1.\ Реализация\ библиотеки
.
.PP
Приступим к реализации библиотеки.
Для хранения данных используются следующие структуры:
.sp 1
.fam C
  1 struct matrix {                                                                 
  2     int maxj;                                                               
  3     double *pj;                                                             
  4 };                                                                              
  5                                                                                 
  6 struct markov {                                                       
  7     int maxi;                                                               
  8     int maxel;                                                              
  9     struct matrix *mp;                                                      
 10 };
.fam T
.
.PP
Структура matrix используется для хранения матрицы переходов.
Структура markov хранит необходимые данные для работы с матрицей.
.
.PP
Также для работы с цепями
Маркова необходимы следующие функции:
.RS
.PI
\fBMARK minit(void)\fP \(em функция для инициализации структуры
цепи.
.
.PI
\fBvoid mfree(MARK p)\fP \(em функция для освобождения памяти.
.
.PI
\fBvoid mcount(MARK p, int ni, int nj)\fP \(em счётчик переходов.
.
.PI
\fBvoid normalize(MARK p)\fP \(em нормализация матрицы переходов.
.
.PI
\fBint getel(MARK p, int prewel)\fP \(em получение номера элемента
по предыдущему номеру.
.
.RE
.sp 1
.
.H3 2.2.\ Генератор\ текста
.bp
.
.so .books.tr
